load_module modules/ngx_http_app_protect_module.so;

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    app_protect_enable on;
    app_protect_security_log_enable on;
    app_protect_security_log "/etc/app_protect/conf/nap.d/simplify_requests.json" /var/log/app_protect/class_simplified_security.log;
#    app_protect_security_log "/etc/app_protect/conf/log_default.json" /var/log/app_protect/class_security.log;

    app_protect_policy_file "/etc/app_protect/conf/NginxStrictPolicy.json";
#    app_protect_policy_file "/etc/app_protect/conf/nap.d/policy_viol_filetype.json";
#    app_protect_policy_file "/etc/app_protect/conf/nap.d/policy_viol_evasion.json";
#    app_protect_policy_file "/etc/app_protect/conf/nap.d/policy_viol_http.json";
#    app_protect_policy_file "/etc/app_protect/conf/nap.d/policy_transparent.json";

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}


# TCP/UDP proxy and load balancing block
#
#stream {
    # Example configuration for TCP load balancing

    #upstream stream_backend {
    #    zone tcp_servers 64k;
    #    server backend1.example.com:12345;
    #    server backend2.example.com:12345;
    #}

    #server {
    #    listen 12345;
    #    status_zone tcp_server;
    #    proxy_pass stream_backend;
    #}
#}
